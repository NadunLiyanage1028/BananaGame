{"ast":null,"code":"var _jsxFileName = \"/Users/nadunliyanage/BananaGame/client/src/pages/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [questionData, setQuestionData] = useState(null); // Holds question and solution data from API\n  const [userGuess, setUserGuess] = useState(''); // Holds the player's current guess\n  const [feedback, setFeedback] = useState(''); // Feedback for player (e.g., correct or incorrect)\n  const [loading, setLoading] = useState(true); // Tracks if the question is still loading\n  const [score, setScore] = useState(0); // Player's score\n  const [level, setLevel] = useState(1); // Player's current level\n\n  // Define score thresholds for each level\n  const scoreThresholds = {\n    1: 20,\n    2: 40,\n    3: 60,\n    4: 80,\n    5: 100\n  };\n\n  // Fetches a new question from the Banana Game API\n  useEffect(() => {\n    fetchQuestion();\n  }, []);\n\n  // Function to fetch question and solution data from the Banana Game API\n  const fetchQuestion = async () => {\n    setLoading(true); // Set loading to true before starting the fetch\n    try {\n      console.log(\"Fetching new question from API...\");\n      const response = await axios.get('/uob/banana/api.php?out=json'); // Use relative URL due to proxy\n      console.log(\"API response:\", response.data); // Log the API response\n\n      if (response.data && response.data.question && response.data.solution) {\n        setQuestionData(response.data); // Store API response in state\n        setFeedback(''); // Clear feedback message on new question load\n      } else {\n        console.warn(\"API response does not contain question and solution data.\");\n        setFeedback('Error: Could not load game question.');\n      }\n    } catch (error) {\n      console.error(\"Error fetching the question:\", error);\n      setFeedback('Failed to load game question. Please try again.');\n    } finally {\n      setLoading(false); // Set loading to false once the fetch completes\n    }\n  };\n\n  // Function to handle the player's guess\n  const handleGuess = () => {\n    if (userGuess === questionData.solution) {\n      const newScore = score + 10;\n      setScore(newScore); // Update the score\n\n      // Check if player has met the score threshold to level up\n      if (newScore >= scoreThresholds[level]) {\n        setLevel(level + 1); // Level up\n        setFeedback(`Correct! You've reached Level ${level + 1}!`);\n      } else {\n        setFeedback('Correct! Keep going!');\n      }\n      fetchQuestion(); // Fetch a new question if the guess is correct\n      setUserGuess(''); // Clear the input field\n    } else {\n      setFeedback('Incorrect, try again!'); // Provide feedback to try again\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Banana Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score, \" | Level: \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this) // Display loading message while fetching the question\n    : questionData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Guess the number shown in the image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: questionData.question,\n        alt: \"Banana Game Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userGuess,\n        onChange: e => setUserGuess(e.target.value),\n        placeholder: \"Enter your guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuess,\n        children: \"Submit Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback || 'Error loading game question'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this) // Show error if no question data\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"GugypBG+t2qKvYm3KxcLkyNqR7o=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Game","_s","questionData","setQuestionData","userGuess","setUserGuess","feedback","setFeedback","loading","setLoading","score","setScore","level","setLevel","scoreThresholds","fetchQuestion","console","log","response","get","data","question","solution","warn","error","handleGuess","newScore","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/nadunliyanage/BananaGame/client/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Game = () => {\n    const [questionData, setQuestionData] = useState(null); // Holds question and solution data from API\n    const [userGuess, setUserGuess] = useState(''); // Holds the player's current guess\n    const [feedback, setFeedback] = useState(''); // Feedback for player (e.g., correct or incorrect)\n    const [loading, setLoading] = useState(true); // Tracks if the question is still loading\n    const [score, setScore] = useState(0); // Player's score\n    const [level, setLevel] = useState(1); // Player's current level\n\n    // Define score thresholds for each level\n    const scoreThresholds = {\n        1: 20,\n        2: 40,\n        3: 60,\n        4: 80,\n        5: 100\n    };\n\n    // Fetches a new question from the Banana Game API\n    useEffect(() => {\n        fetchQuestion();\n    }, []);\n\n    // Function to fetch question and solution data from the Banana Game API\n    const fetchQuestion = async () => {\n        setLoading(true); // Set loading to true before starting the fetch\n        try {\n            console.log(\"Fetching new question from API...\");\n            const response = await axios.get('/uob/banana/api.php?out=json'); // Use relative URL due to proxy\n            console.log(\"API response:\", response.data); // Log the API response\n\n            if (response.data && response.data.question && response.data.solution) {\n                setQuestionData(response.data); // Store API response in state\n                setFeedback(''); // Clear feedback message on new question load\n            } else {\n                console.warn(\"API response does not contain question and solution data.\");\n                setFeedback('Error: Could not load game question.');\n            }\n        } catch (error) {\n            console.error(\"Error fetching the question:\", error);\n            setFeedback('Failed to load game question. Please try again.');\n        } finally {\n            setLoading(false); // Set loading to false once the fetch completes\n        }\n    };\n\n    // Function to handle the player's guess\n    const handleGuess = () => {\n        if (userGuess === questionData.solution) {\n            const newScore = score + 10;\n            setScore(newScore); // Update the score\n\n            // Check if player has met the score threshold to level up\n            if (newScore >= scoreThresholds[level]) {\n                setLevel(level + 1); // Level up\n                setFeedback(`Correct! You've reached Level ${level + 1}!`);\n            } else {\n                setFeedback('Correct! Keep going!');\n            }\n\n            fetchQuestion(); // Fetch a new question if the guess is correct\n            setUserGuess(''); // Clear the input field\n        } else {\n            setFeedback('Incorrect, try again!'); // Provide feedback to try again\n        }\n    };\n\n    return (\n        <div>\n            <h1>Banana Game</h1>\n            <p>Score: {score} | Level: {level}</p>\n            {loading ? (\n                <p>Loading question...</p> // Display loading message while fetching the question\n            ) : questionData ? (\n                <div>\n                    <p>Guess the number shown in the image:</p>\n                    <img src={questionData.question} alt=\"Banana Game Question\" />\n                    <input\n                        type=\"text\"\n                        value={userGuess}\n                        onChange={(e) => setUserGuess(e.target.value)}\n                        placeholder=\"Enter your guess\"\n                    />\n                    <button onClick={handleGuess}>Submit Guess</button>\n                    <p>{feedback}</p>\n                </div>\n            ) : (\n                <p>{feedback || 'Error loading game question'}</p> // Show error if no question data\n            )}\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}