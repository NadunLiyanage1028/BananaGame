{"ast":null,"code":"var _jsxFileName = \"/Users/nadunliyanage/BananaGame/client/src/pages/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [questionData, setQuestionData] = useState(null); // Holds question and solution data from the API\n  const [userGuess, setUserGuess] = useState(''); // Holds player's current guess\n  const [feedback, setFeedback] = useState(''); // Feedback for the player\n  const [loading, setLoading] = useState(true); // Loading state for question fetch\n  const [score, setScore] = useState(0); // Player's current score\n  const [level, setLevel] = useState(1); // Current game level\n  const [remainingAttempts, setRemainingAttempts] = useState(5); // Track attempts for each level\n\n  // Define score thresholds for each level\n  const scoreThresholds = [0, 20, 40, 60, 80, 100];\n  // Define attempts per level to increase difficulty as levels progress\n  const attemptsPerLevel = [5, 4, 3, 2, 1];\n  useEffect(() => {\n    fetchQuestion();\n  }, [level]); // Fetch a new question when the level changes\n\n  // Function to fetch question and solution data from the Banana Game API\n  const fetchQuestion = async () => {\n    setLoading(true); // Start loading before the fetch\n    try {\n      console.log(\"Fetching new question from API...\");\n      const response = await axios.get('/uob/banana/api.php?out=json'); // Use relative URL due to proxy\n      console.log(\"API response:\", response.data); // Log the API response\n\n      if (response.data && response.data.question && response.data.solution) {\n        setQuestionData(response.data); // Store question data in state\n        setFeedback(''); // Clear previous feedback\n        setRemainingAttempts(attemptsPerLevel[level - 1]); // Set attempts for the current level\n      } else {\n        console.warn(\"API response missing question and solution data.\");\n        setFeedback('Error: Could not load game question.');\n      }\n    } catch (error) {\n      console.error(\"Error fetching the question:\", error);\n      setFeedback('Failed to load game question. Please try again.');\n    } finally {\n      setLoading(false); // End loading after fetch completes\n    }\n  };\n\n  // Function to handle player's guess\n  const handleGuess = () => {\n    if (userGuess === questionData.solution) {\n      setFeedback('Correct! Well done!');\n      const newScore = score + 10; // Increase score for correct answers\n      setScore(newScore);\n\n      // Check if the score meets the threshold for the next level\n      if (newScore >= scoreThresholds[level]) {\n        setLevel(level + 1); // Advance to the next level\n      } else {\n        fetchQuestion(); // Fetch a new question within the same level\n      }\n      setUserGuess(''); // Clear input field for the next question\n    } else {\n      setFeedback('Incorrect, try again!');\n      setRemainingAttempts(prev => prev - 1); // Decrease remaining attempts\n\n      // Check if out of attempts\n      if (remainingAttempts - 1 <= 0) {\n        setFeedback('Out of attempts! Restarting level.');\n        const penaltyScore = score - 5 >= 0 ? score - 5 : 0; // Penalize 5 points, but donâ€™t go below 0\n        setScore(penaltyScore);\n        fetchQuestion(); // Restart level\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Banana Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score, \" | Level: \", level, \" | Remaining Attempts: \", remainingAttempts]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this) : questionData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Guess the number shown in the image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: questionData.question,\n        alt: \"Banana Game Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userGuess,\n        onChange: e => setUserGuess(e.target.value),\n        placeholder: \"Enter your guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuess,\n        children: \"Submit Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback || 'Error loading game question'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"9aG9LM/0UBEq/Ml6HeRLkX+nepc=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Game","_s","questionData","setQuestionData","userGuess","setUserGuess","feedback","setFeedback","loading","setLoading","score","setScore","level","setLevel","remainingAttempts","setRemainingAttempts","scoreThresholds","attemptsPerLevel","fetchQuestion","console","log","response","get","data","question","solution","warn","error","handleGuess","newScore","prev","penaltyScore","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/nadunliyanage/BananaGame/client/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Game = () => {\n    const [questionData, setQuestionData] = useState(null); // Holds question and solution data from the API\n    const [userGuess, setUserGuess] = useState(''); // Holds player's current guess\n    const [feedback, setFeedback] = useState(''); // Feedback for the player\n    const [loading, setLoading] = useState(true); // Loading state for question fetch\n    const [score, setScore] = useState(0); // Player's current score\n    const [level, setLevel] = useState(1); // Current game level\n    const [remainingAttempts, setRemainingAttempts] = useState(5); // Track attempts for each level\n\n    // Define score thresholds for each level\n    const scoreThresholds = [0, 20, 40, 60, 80, 100];\n    // Define attempts per level to increase difficulty as levels progress\n    const attemptsPerLevel = [5, 4, 3, 2, 1];\n\n    useEffect(() => {\n        fetchQuestion();\n    }, [level]); // Fetch a new question when the level changes\n\n    // Function to fetch question and solution data from the Banana Game API\n    const fetchQuestion = async () => {\n        setLoading(true); // Start loading before the fetch\n        try {\n            console.log(\"Fetching new question from API...\");\n            const response = await axios.get('/uob/banana/api.php?out=json'); // Use relative URL due to proxy\n            console.log(\"API response:\", response.data); // Log the API response\n\n            if (response.data && response.data.question && response.data.solution) {\n                setQuestionData(response.data); // Store question data in state\n                setFeedback(''); // Clear previous feedback\n                setRemainingAttempts(attemptsPerLevel[level - 1]); // Set attempts for the current level\n            } else {\n                console.warn(\"API response missing question and solution data.\");\n                setFeedback('Error: Could not load game question.');\n            }\n        } catch (error) {\n            console.error(\"Error fetching the question:\", error);\n            setFeedback('Failed to load game question. Please try again.');\n        } finally {\n            setLoading(false); // End loading after fetch completes\n        }\n    };\n\n    // Function to handle player's guess\n    const handleGuess = () => {\n        if (userGuess === questionData.solution) {\n            setFeedback('Correct! Well done!');\n            const newScore = score + 10; // Increase score for correct answers\n            setScore(newScore);\n\n            // Check if the score meets the threshold for the next level\n            if (newScore >= scoreThresholds[level]) {\n                setLevel(level + 1); // Advance to the next level\n            } else {\n                fetchQuestion(); // Fetch a new question within the same level\n            }\n\n            setUserGuess(''); // Clear input field for the next question\n        } else {\n            setFeedback('Incorrect, try again!');\n            setRemainingAttempts(prev => prev - 1); // Decrease remaining attempts\n\n            // Check if out of attempts\n            if (remainingAttempts - 1 <= 0) {\n                setFeedback('Out of attempts! Restarting level.');\n                const penaltyScore = score - 5 >= 0 ? score - 5 : 0; // Penalize 5 points, but donâ€™t go below 0\n                setScore(penaltyScore);\n                fetchQuestion(); // Restart level\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h1>Banana Game</h1>\n            <p>Score: {score} | Level: {level} | Remaining Attempts: {remainingAttempts}</p>\n            {loading ? (\n                <p>Loading question...</p>\n            ) : questionData ? (\n                <div>\n                    <p>Guess the number shown in the image:</p>\n                    <img src={questionData.question} alt=\"Banana Game Question\" />\n                    <input\n                        type=\"text\"\n                        value={userGuess}\n                        onChange={(e) => setUserGuess(e.target.value)}\n                        placeholder=\"Enter your guess\"\n                    />\n                    <button onClick={handleGuess}>Submit Guess</button>\n                    <p>{feedback}</p>\n                </div>\n            ) : (\n                <p>{feedback || 'Error loading game question'}</p>\n            )}\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}