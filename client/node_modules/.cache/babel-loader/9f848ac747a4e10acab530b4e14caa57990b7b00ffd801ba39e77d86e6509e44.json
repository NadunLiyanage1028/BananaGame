{"ast":null,"code":"var _jsxFileName = \"/Users/nadunliyanage/BananaGame/client/src/pages/Levels.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation, useHistory } from 'react-router-dom'; // Import necessary hooks\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [questionData, setQuestionData] = useState(null); // Holds the question and solution data from API\n  const [userGuess, setUserGuess] = useState(''); // Holds the player's current guess\n  const [feedback, setFeedback] = useState(''); // Holds feedback for player (e.g., correct or incorrect guess)\n  const [loading, setLoading] = useState(true); // Tracks if the question is still loading\n  const [currentLevel, setCurrentLevel] = useState(1); // Tracks the current level\n\n  // Get the level parameter from the URL (e.g., ?level=1)\n  const query = new URLSearchParams(useLocation().search);\n  const level = query.get('level') ? parseInt(query.get('level')) : 1; // Default to level 1 if no level is specified\n\n  const history = useHistory();\n\n  // Set the current level based on the query parameter\n  useEffect(() => {\n    setCurrentLevel(level);\n    fetchQuestion(level);\n  }, [level]);\n\n  // Function to fetch question and solution data from the Banana Game API\n  const fetchQuestion = async level => {\n    setLoading(true); // Set loading to true before starting the fetch\n    try {\n      console.log(\"Fetching new question for level\", level);\n      const response = await axios.get(`/uob/banana/api.php?level=${level}&out=json`); // Fetch based on level\n      console.log(\"API response:\", response.data); // Log the API response\n\n      if (response.data && response.data.question && response.data.solution) {\n        setQuestionData(response.data); // Store API response in state\n        setFeedback(''); // Clear feedback message on new question load\n      } else {\n        console.warn(\"API response does not contain question and solution data.\");\n        setFeedback('Error: Could not load game question.');\n      }\n    } catch (error) {\n      console.error(\"Error fetching the question:\", error);\n      setFeedback('Failed to load game question. Please try again.');\n    } finally {\n      setLoading(false); // Set loading to false once the fetch completes\n    }\n  };\n\n  // Function to handle the player's guess\n  const handleGuess = () => {\n    if (userGuess === questionData.solution) {\n      setFeedback('Correct! Well done!'); // Provide positive feedback\n      if (currentLevel < 5) {\n        // Move to the next level\n        const nextLevel = currentLevel + 1;\n        history.push(`/game?level=${nextLevel}`); // Update URL and navigate to next level\n      } else {\n        setFeedback('Congratulations, you have completed the game!');\n      }\n      setUserGuess(''); // Clear the input field\n    } else {\n      setFeedback('Incorrect, try again!'); // Provide feedback to try again\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Banana Game - Level \", currentLevel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this) // Display a loading message while fetching the question\n    : questionData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Guess the number shown in the image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: questionData.question,\n        alt: \"Banana Game Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userGuess,\n        onChange: e => setUserGuess(e.target.value),\n        placeholder: \"Enter your guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuess,\n        children: \"Submit Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback || 'Error loading game question'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this) // Show error if no question data\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"PYD2fvKmCpkk1807d1mMy0WVkUA=\", false, function () {\n  return [useLocation, useHistory];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","useHistory","jsxDEV","_jsxDEV","Game","_s","questionData","setQuestionData","userGuess","setUserGuess","feedback","setFeedback","loading","setLoading","currentLevel","setCurrentLevel","query","URLSearchParams","search","level","get","parseInt","history","fetchQuestion","console","log","response","data","question","solution","warn","error","handleGuess","nextLevel","push","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/nadunliyanage/BananaGame/client/src/pages/Levels.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation, useHistory } from 'react-router-dom'; // Import necessary hooks\n\nconst Game = () => {\n    const [questionData, setQuestionData] = useState(null);  // Holds the question and solution data from API\n    const [userGuess, setUserGuess] = useState('');          // Holds the player's current guess\n    const [feedback, setFeedback] = useState('');            // Holds feedback for player (e.g., correct or incorrect guess)\n    const [loading, setLoading] = useState(true);            // Tracks if the question is still loading\n    const [currentLevel, setCurrentLevel] = useState(1);     // Tracks the current level\n    \n    // Get the level parameter from the URL (e.g., ?level=1)\n    const query = new URLSearchParams(useLocation().search);\n    const level = query.get('level') ? parseInt(query.get('level')) : 1;  // Default to level 1 if no level is specified\n\n    const history = useHistory();\n\n    // Set the current level based on the query parameter\n    useEffect(() => {\n        setCurrentLevel(level);\n        fetchQuestion(level);\n    }, [level]);\n\n    // Function to fetch question and solution data from the Banana Game API\n    const fetchQuestion = async (level) => {\n        setLoading(true); // Set loading to true before starting the fetch\n        try {\n            console.log(\"Fetching new question for level\", level);\n            const response = await axios.get(`/uob/banana/api.php?level=${level}&out=json`);  // Fetch based on level\n            console.log(\"API response:\", response.data); // Log the API response\n\n            if (response.data && response.data.question && response.data.solution) {\n                setQuestionData(response.data); // Store API response in state\n                setFeedback('');  // Clear feedback message on new question load\n            } else {\n                console.warn(\"API response does not contain question and solution data.\");\n                setFeedback('Error: Could not load game question.');\n            }\n        } catch (error) {\n            console.error(\"Error fetching the question:\", error);\n            setFeedback('Failed to load game question. Please try again.');\n        } finally {\n            setLoading(false); // Set loading to false once the fetch completes\n        }\n    };\n\n    // Function to handle the player's guess\n    const handleGuess = () => {\n        if (userGuess === questionData.solution) {\n            setFeedback('Correct! Well done!'); // Provide positive feedback\n            if (currentLevel < 5) {\n                // Move to the next level\n                const nextLevel = currentLevel + 1;\n                history.push(`/game?level=${nextLevel}`); // Update URL and navigate to next level\n            } else {\n                setFeedback('Congratulations, you have completed the game!');\n            }\n            setUserGuess('');     // Clear the input field\n        } else {\n            setFeedback('Incorrect, try again!'); // Provide feedback to try again\n        }\n    };\n\n    return (\n        <div>\n            <h1>Banana Game - Level {currentLevel}</h1>\n            {loading ? (\n                <p>Loading question...</p>  // Display a loading message while fetching the question\n            ) : questionData ? (\n                <div>\n                    <p>Guess the number shown in the image:</p>\n                    <img src={questionData.question} alt=\"Banana Game Question\" />\n                    <input\n                        type=\"text\"\n                        value={userGuess}\n                        onChange={(e) => setUserGuess(e.target.value)}\n                        placeholder=\"Enter your guess\"\n                    />\n                    <button onClick={handleGuess}>Submit Guess</button>\n                    <p>{feedback}</p>\n                </div>\n            ) : (\n                <p>{feedback || 'Error loading game question'}</p>  // Show error if no question data\n            )}\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}