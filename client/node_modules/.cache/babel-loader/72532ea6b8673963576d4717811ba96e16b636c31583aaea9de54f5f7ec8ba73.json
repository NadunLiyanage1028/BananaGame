{"ast":null,"code":"var _jsxFileName = \"/Users/nadunliyanage/BananaGame/client/src/pages/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [questionData, setQuestionData] = useState(null);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [feedback, setFeedback] = useState('');\n  const API_URL = 'https://marcconrad.com/uob/banana/api.php?out=json'; // The Banana API URL for fetching questions\n\n  // Fetch a question from the API\n  const fetchQuestion = async () => {\n    try {\n      console.log(\"Fetching new question from API...\");\n\n      // Fetch data from the Banana API\n      const response = await axios.get(API_URL);\n      console.log(\"Raw API response:\", response); // Check the raw API response in the console\n\n      // Check if the response contains an image URL or a valid question/solution\n      if (response.data && response.data.imageUrl) {\n        // If the API returns an image URL, treat it as the question (i.e., display the image)\n        setQuestionData({\n          imageUrl: response.data.imageUrl\n        });\n        setFeedback(''); // Reset feedback to be empty\n      } else {\n        // If the response is structured with questions/solutions\n        if (response.data.question && response.data.solution) {\n          setQuestionData(response.data); // Set the question data in the state\n          setFeedback(''); // Reset feedback to be empty\n        } else {\n          setFeedback('Error: Invalid response structure from the API.');\n          console.log(\"Error: Invalid response structure.\", response.data);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching the question:\", error);\n      setFeedback('Failed to load game question. Please try again.');\n    }\n  };\n\n  // Start game or fetch new question when the component mounts\n  useEffect(() => {\n    fetchQuestion();\n  }, []); // Only fetch the first question on initial mount\n\n  // Handle the answer when a user clicks on one of the options\n  const handleAnswer = answer => {\n    if (answer === questionData.solution) {\n      setScore(score + 10); // Increase score for a correct answer\n      setLevel(level + 1); // Move to the next level\n      setFeedback('Correct! Moving to next level.');\n    } else {\n      setFeedback('Incorrect. Try again!');\n    }\n\n    // Fetch the next question after a short delay\n    setTimeout(fetchQuestion, 1000); // Fetch the next question after 1 second delay\n  };\n\n  // If question data is not available yet, show a loading message\n  if (!questionData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Banana Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", score, \" | Level: \", level]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading question...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Display the question and options once data is available\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Banana Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score, \" | Level: \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questionData.imageUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: questionData.imageUrl,\n        alt: \"Question Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: questionData.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswer(1),\n          children: questionData.option1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswer(2),\n          children: questionData.option2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswer(3),\n          children: questionData.option3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswer(4),\n          children: questionData.option4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"AEz5efKn1Rxm75I+1dXf9A32vCw=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Game","_s","questionData","setQuestionData","score","setScore","level","setLevel","feedback","setFeedback","API_URL","fetchQuestion","console","log","response","get","data","imageUrl","question","solution","error","handleAnswer","answer","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","option1","option2","option3","option4","_c","$RefreshReg$"],"sources":["/Users/nadunliyanage/BananaGame/client/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Game = () => {\n    const [questionData, setQuestionData] = useState(null);\n    const [score, setScore] = useState(0);\n    const [level, setLevel] = useState(1);\n    const [feedback, setFeedback] = useState('');\n\n    const API_URL = 'https://marcconrad.com/uob/banana/api.php?out=json'; // The Banana API URL for fetching questions\n\n    // Fetch a question from the API\n    const fetchQuestion = async () => {\n        try {\n            console.log(\"Fetching new question from API...\");\n\n            // Fetch data from the Banana API\n            const response = await axios.get(API_URL);\n\n            console.log(\"Raw API response:\", response);  // Check the raw API response in the console\n\n            // Check if the response contains an image URL or a valid question/solution\n            if (response.data && response.data.imageUrl) {\n                // If the API returns an image URL, treat it as the question (i.e., display the image)\n                setQuestionData({ imageUrl: response.data.imageUrl });\n                setFeedback(''); // Reset feedback to be empty\n            } else {\n                // If the response is structured with questions/solutions\n                if (response.data.question && response.data.solution) {\n                    setQuestionData(response.data); // Set the question data in the state\n                    setFeedback(''); // Reset feedback to be empty\n                } else {\n                    setFeedback('Error: Invalid response structure from the API.');\n                    console.log(\"Error: Invalid response structure.\", response.data);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error fetching the question:\", error);\n            setFeedback('Failed to load game question. Please try again.');\n        }\n    };\n\n    // Start game or fetch new question when the component mounts\n    useEffect(() => {\n        fetchQuestion();\n    }, []); // Only fetch the first question on initial mount\n\n    // Handle the answer when a user clicks on one of the options\n    const handleAnswer = (answer) => {\n        if (answer === questionData.solution) {\n            setScore(score + 10); // Increase score for a correct answer\n            setLevel(level + 1);  // Move to the next level\n            setFeedback('Correct! Moving to next level.');\n        } else {\n            setFeedback('Incorrect. Try again!');\n        }\n\n        // Fetch the next question after a short delay\n        setTimeout(fetchQuestion, 1000); // Fetch the next question after 1 second delay\n    };\n\n    // If question data is not available yet, show a loading message\n    if (!questionData) {\n        return (\n            <div>\n                <h1>Banana Game</h1>\n                <p>Score: {score} | Level: {level}</p>\n                <p>{feedback}</p>\n                <p>Loading question...</p>\n            </div>\n        );\n    }\n\n    // Display the question and options once data is available\n    return (\n        <div>\n            <h1>Banana Game</h1>\n            <p>Score: {score} | Level: {level}</p>\n            <p>{feedback}</p>\n            <div>\n                {/* If image URL is available, render the image */}\n                {questionData.imageUrl ? (\n                    <img src={questionData.imageUrl} alt=\"Question Image\" />\n                ) : (\n                    <div>\n                        <h2>{questionData.question}</h2>\n                        <button onClick={() => handleAnswer(1)}>{questionData.option1}</button>\n                        <button onClick={() => handleAnswer(2)}>{questionData.option2}</button>\n                        <button onClick={() => handleAnswer(3)}>{questionData.option3}</button>\n                        <button onClick={() => handleAnswer(4)}>{questionData.option4}</button>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMe,OAAO,GAAG,oDAAoD,CAAC,CAAC;;EAEtE;EACA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;;MAEhD;MACA,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAACL,OAAO,CAAC;MAEzCE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEC,QAAQ,CAAC,CAAC,CAAE;;MAE7C;MACA,IAAIA,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,QAAQ,EAAE;QACzC;QACAd,eAAe,CAAC;UAAEc,QAAQ,EAAEH,QAAQ,CAACE,IAAI,CAACC;QAAS,CAAC,CAAC;QACrDR,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;MACrB,CAAC,MAAM;QACH;QACA,IAAIK,QAAQ,CAACE,IAAI,CAACE,QAAQ,IAAIJ,QAAQ,CAACE,IAAI,CAACG,QAAQ,EAAE;UAClDhB,eAAe,CAACW,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;UAChCP,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;QACrB,CAAC,MAAM;UACHA,WAAW,CAAC,iDAAiD,CAAC;UAC9DG,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEC,QAAQ,CAACE,IAAI,CAAC;QACpE;MACJ;IACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZR,OAAO,CAACQ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDX,WAAW,CAAC,iDAAiD,CAAC;IAClE;EACJ,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACZe,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMU,YAAY,GAAIC,MAAM,IAAK;IAC7B,IAAIA,MAAM,KAAKpB,YAAY,CAACiB,QAAQ,EAAE;MAClCd,QAAQ,CAACD,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;MACtBG,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,CAAC,CAAE;MACtBG,WAAW,CAAC,gCAAgC,CAAC;IACjD,CAAC,MAAM;MACHA,WAAW,CAAC,uBAAuB,CAAC;IACxC;;IAEA;IACAc,UAAU,CAACZ,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;EACrC,CAAC;;EAED;EACA,IAAI,CAACT,YAAY,EAAE;IACf,oBACIH,OAAA;MAAAyB,QAAA,gBACIzB,OAAA;QAAAyB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB7B,OAAA;QAAAyB,QAAA,GAAG,SAAO,EAACpB,KAAK,EAAC,YAAU,EAACE,KAAK;MAAA;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtC7B,OAAA;QAAAyB,QAAA,EAAIhB;MAAQ;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjB7B,OAAA;QAAAyB,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC;EAEd;;EAEA;EACA,oBACI7B,OAAA;IAAAyB,QAAA,gBACIzB,OAAA;MAAAyB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB7B,OAAA;MAAAyB,QAAA,GAAG,SAAO,EAACpB,KAAK,EAAC,YAAU,EAACE,KAAK;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtC7B,OAAA;MAAAyB,QAAA,EAAIhB;IAAQ;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB7B,OAAA;MAAAyB,QAAA,EAEKtB,YAAY,CAACe,QAAQ,gBAClBlB,OAAA;QAAK8B,GAAG,EAAE3B,YAAY,CAACe,QAAS;QAACa,GAAG,EAAC;MAAgB;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAExD7B,OAAA;QAAAyB,QAAA,gBACIzB,OAAA;UAAAyB,QAAA,EAAKtB,YAAY,CAACgB;QAAQ;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAChC7B,OAAA;UAAQgC,OAAO,EAAEA,CAAA,KAAMV,YAAY,CAAC,CAAC,CAAE;UAAAG,QAAA,EAAEtB,YAAY,CAAC8B;QAAO;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eACvE7B,OAAA;UAAQgC,OAAO,EAAEA,CAAA,KAAMV,YAAY,CAAC,CAAC,CAAE;UAAAG,QAAA,EAAEtB,YAAY,CAAC+B;QAAO;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eACvE7B,OAAA;UAAQgC,OAAO,EAAEA,CAAA,KAAMV,YAAY,CAAC,CAAC,CAAE;UAAAG,QAAA,EAAEtB,YAAY,CAACgC;QAAO;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eACvE7B,OAAA;UAAQgC,OAAO,EAAEA,CAAA,KAAMV,YAAY,CAAC,CAAC,CAAE;UAAAG,QAAA,EAAEtB,YAAY,CAACiC;QAAO;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE;IACR;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC3B,EAAA,CA5FID,IAAI;AAAAoC,EAAA,GAAJpC,IAAI;AA8FV,eAAeA,IAAI;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}