{"ast":null,"code":"var _jsxFileName = \"/Users/nadunliyanage/BananaGame/client/src/pages/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [questionData, setQuestionData] = useState(null); // Holds the question and solution data from API\n  const [userGuess, setUserGuess] = useState(''); // Holds the player's current guess\n  const [feedback, setFeedback] = useState(''); // Holds feedback for player (e.g., correct or incorrect guess)\n  const [score, setScore] = useState(0); // Tracks the player's score\n  const [level, setLevel] = useState(1); // Tracks the player's current level\n\n  // Define level thresholds (score required to unlock each level)\n  const levelThresholds = [0, 5, 10, 15, 20]; // e.g., Level 1: 0-4, Level 2: 5-9, etc.\n\n  // Fetches a new question from the Banana Game API when the component loads\n  useEffect(() => {\n    fetchQuestion();\n  }, []);\n\n  // Function to fetch question and solution data from the Banana Game API\n  const fetchQuestion = async () => {\n    try {\n      console.log(\"Fetching new question from API...\");\n      const response = await axios.get('http://marcconrad.com/uob/banana/api.php?out=json');\n      console.log(\"API response:\", response.data); // Log the API response\n\n      if (response.data && response.data.question && response.data.solution) {\n        setQuestionData(response.data); // Store API response in state\n        setFeedback(''); // Clear feedback message on new question load\n      } else {\n        console.warn(\"API response does not contain question and solution data.\");\n        setFeedback('Error: Could not load game question.');\n      }\n    } catch (error) {\n      console.error(\"Error fetching the question:\", error);\n      setFeedback('Failed to load game question. Please try again.');\n    }\n  };\n\n  // Function to handle the player's guess\n  const handleGuess = () => {\n    if (userGuess === questionData.solution) {\n      setFeedback('Correct! Well done!'); // Provide positive feedback\n      setScore(score + 1); // Increase score when the guess is correct\n      checkLevelUp(); // Check if the player levels up\n      fetchQuestion(); // Fetch a new question if the guess is correct\n      setUserGuess(''); // Clear the input field\n    } else {\n      setFeedback('Incorrect, try again!'); // Provide feedback to try again\n    }\n  };\n\n  // Function to check if the player has leveled up\n  const checkLevelUp = () => {\n    const newLevel = levelThresholds.findIndex(threshold => score >= threshold) + 1;\n    if (newLevel > level) {\n      setLevel(newLevel); // Update level if the player reaches a new threshold\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Banana Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score, \" | Level: \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), \" \", questionData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Guess the number shown in the image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: questionData.question,\n        alt: \"Banana Game Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userGuess,\n        onChange: e => setUserGuess(e.target.value),\n        placeholder: \"Enter your guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuess,\n        children: \"Submit Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback || 'Loading question...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"FBVrhsAaXT0OvxuZbXlu8fZjIWQ=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Game","_s","questionData","setQuestionData","userGuess","setUserGuess","feedback","setFeedback","score","setScore","level","setLevel","levelThresholds","fetchQuestion","console","log","response","get","data","question","solution","warn","error","handleGuess","checkLevelUp","newLevel","findIndex","threshold","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/nadunliyanage/BananaGame/client/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Game = () => {\n    const [questionData, setQuestionData] = useState(null);  // Holds the question and solution data from API\n    const [userGuess, setUserGuess] = useState('');          // Holds the player's current guess\n    const [feedback, setFeedback] = useState('');            // Holds feedback for player (e.g., correct or incorrect guess)\n    const [score, setScore] = useState(0);                   // Tracks the player's score\n    const [level, setLevel] = useState(1);                   // Tracks the player's current level\n\n    // Define level thresholds (score required to unlock each level)\n    const levelThresholds = [0, 5, 10, 15, 20]; // e.g., Level 1: 0-4, Level 2: 5-9, etc.\n\n    // Fetches a new question from the Banana Game API when the component loads\n    useEffect(() => {\n        fetchQuestion();\n    }, []);\n\n    // Function to fetch question and solution data from the Banana Game API\n    const fetchQuestion = async () => {\n        try {\n            console.log(\"Fetching new question from API...\");\n            const response = await axios.get('http://marcconrad.com/uob/banana/api.php?out=json');\n            console.log(\"API response:\", response.data); // Log the API response\n\n            if (response.data && response.data.question && response.data.solution) {\n                setQuestionData(response.data); // Store API response in state\n                setFeedback('');  // Clear feedback message on new question load\n            } else {\n                console.warn(\"API response does not contain question and solution data.\");\n                setFeedback('Error: Could not load game question.');\n            }\n        } catch (error) {\n            console.error(\"Error fetching the question:\", error);\n            setFeedback('Failed to load game question. Please try again.');\n        }\n    };\n\n    // Function to handle the player's guess\n    const handleGuess = () => {\n        if (userGuess === questionData.solution) {\n            setFeedback('Correct! Well done!'); // Provide positive feedback\n            setScore(score + 1); // Increase score when the guess is correct\n            checkLevelUp(); // Check if the player levels up\n            fetchQuestion();      // Fetch a new question if the guess is correct\n            setUserGuess('');     // Clear the input field\n        } else {\n            setFeedback('Incorrect, try again!'); // Provide feedback to try again\n        }\n    };\n\n    // Function to check if the player has leveled up\n    const checkLevelUp = () => {\n        const newLevel = levelThresholds.findIndex(threshold => score >= threshold) + 1;\n        if (newLevel > level) {\n            setLevel(newLevel); // Update level if the player reaches a new threshold\n        }\n    };\n\n    return (\n        <div>\n            <h1>Banana Game</h1>\n            <p>Score: {score} | Level: {level}</p> {/* Displaying the current score and level */}\n            {questionData ? (\n                <div>\n                    <p>Guess the number shown in the image:</p>\n                    <img src={questionData.question} alt=\"Banana Game Question\" />\n                    <input\n                        type=\"text\"\n                        value={userGuess}\n                        onChange={(e) => setUserGuess(e.target.value)}\n                        placeholder=\"Enter your guess\"\n                    />\n                    <button onClick={handleGuess}>Submit Guess</button>\n                    <p>{feedback}</p>\n                </div>\n            ) : (\n                <p>{feedback || 'Loading question...'}</p>\n            )}\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}