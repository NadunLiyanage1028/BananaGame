{"ast":null,"code":"var _jsxFileName = \"/Users/nadunliyanage/BananaGame/client/src/pages/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = ({\n  player,\n  updateScoreboard\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const initialLevel = parseInt(queryParams.get('level')) || 1;\n  const [questionData, setQuestionData] = useState(null);\n  const [userGuess, setUserGuess] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(initialLevel);\n  const [remainingAttempts, setRemainingAttempts] = useState(5);\n  const scoreThresholds = [0, 20, 40, 60, 80, 100];\n  const attemptsPerLevel = [5, 4, 3, 2, 1];\n  useEffect(() => {\n    fetchQuestion();\n  }, [level]);\n  const fetchQuestion = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get('/uob/banana/api.php?out=json');\n      if (response.data && response.data.question && response.data.solution) {\n        setQuestionData(response.data);\n        setFeedback('');\n        setRemainingAttempts(attemptsPerLevel[level - 1]);\n      } else {\n        setFeedback('Error: Could not load game question.');\n      }\n    } catch (error) {\n      console.error(\"Error fetching the question:\", error);\n      setFeedback('Failed to load game question. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleGuess = () => {\n    if (userGuess === questionData.solution) {\n      setFeedback('Correct! Well done!');\n      const newScore = score + 10;\n      setScore(newScore);\n      if (newScore >= scoreThresholds[level]) {\n        setLevel(level + 1);\n        localStorage.setItem('currentLevel', level + 1);\n        navigate(`/levels`);\n      } else {\n        fetchQuestion();\n      }\n      setUserGuess('');\n    } else {\n      setFeedback('Incorrect, try again!');\n      setRemainingAttempts(prev => prev - 1);\n      if (remainingAttempts <= 1) {\n        setFeedback('Out of attempts! Restarting level.');\n        setScore(Math.max(0, score - 5));\n        fetchQuestion();\n      }\n    }\n  };\n  const handleGameEnd = () => {\n    updateScoreboard(player.name, score, player.avatar);\n    navigate('/score');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Banana Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score, \" | Level: \", level, \" | Remaining Attempts: \", remainingAttempts]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this) : questionData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Guess the number shown in the image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: questionData.question,\n        alt: \"Banana Game Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userGuess,\n        onChange: e => setUserGuess(e.target.value),\n        placeholder: \"Enter your guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuess,\n        children: \"Submit Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGameEnd,\n        children: \"End Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback || 'Error loading game question'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"Fywa5zFEMrI6qS8r2r5fwUX+RnI=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","useNavigate","jsxDEV","_jsxDEV","Game","player","updateScoreboard","_s","navigate","location","queryParams","URLSearchParams","search","initialLevel","parseInt","get","questionData","setQuestionData","userGuess","setUserGuess","feedback","setFeedback","loading","setLoading","score","setScore","level","setLevel","remainingAttempts","setRemainingAttempts","scoreThresholds","attemptsPerLevel","fetchQuestion","response","data","question","solution","error","console","handleGuess","newScore","localStorage","setItem","prev","Math","max","handleGameEnd","name","avatar","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/nadunliyanage/BananaGame/client/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst Game = ({ player, updateScoreboard }) => {\n    const navigate = useNavigate();\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const initialLevel = parseInt(queryParams.get('level')) || 1;\n\n    const [questionData, setQuestionData] = useState(null);\n    const [userGuess, setUserGuess] = useState('');\n    const [feedback, setFeedback] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [score, setScore] = useState(0);\n    const [level, setLevel] = useState(initialLevel);\n    const [remainingAttempts, setRemainingAttempts] = useState(5);\n\n    const scoreThresholds = [0, 20, 40, 60, 80, 100];\n    const attemptsPerLevel = [5, 4, 3, 2, 1];\n\n    useEffect(() => {\n        fetchQuestion();\n    }, [level]);\n\n    const fetchQuestion = async () => {\n        setLoading(true);\n        try {\n            const response = await axios.get('/uob/banana/api.php?out=json');\n            if (response.data && response.data.question && response.data.solution) {\n                setQuestionData(response.data);\n                setFeedback('');\n                setRemainingAttempts(attemptsPerLevel[level - 1]);\n            } else {\n                setFeedback('Error: Could not load game question.');\n            }\n        } catch (error) {\n            console.error(\"Error fetching the question:\", error);\n            setFeedback('Failed to load game question. Please try again.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleGuess = () => {\n        if (userGuess === questionData.solution) {\n            setFeedback('Correct! Well done!');\n            const newScore = score + 10;\n            setScore(newScore);\n\n            if (newScore >= scoreThresholds[level]) {\n                setLevel(level + 1);\n                localStorage.setItem('currentLevel', level + 1);\n                navigate(`/levels`);\n            } else {\n                fetchQuestion();\n            }\n            setUserGuess('');\n        } else {\n            setFeedback('Incorrect, try again!');\n            setRemainingAttempts((prev) => prev - 1);\n\n            if (remainingAttempts <= 1) {\n                setFeedback('Out of attempts! Restarting level.');\n                setScore(Math.max(0, score - 5));\n                fetchQuestion();\n            }\n        }\n    };\n\n    const handleGameEnd = () => {\n        updateScoreboard(player.name, score, player.avatar);\n        navigate('/score');\n    };\n\n    return (\n        <div>\n            <h1>Banana Game</h1>\n            <p>Score: {score} | Level: {level} | Remaining Attempts: {remainingAttempts}</p>\n            {loading ? (\n                <p>Loading question...</p>\n            ) : questionData ? (\n                <div>\n                    <p>Guess the number shown in the image:</p>\n                    <img src={questionData.question} alt=\"Banana Game Question\" />\n                    <input\n                        type=\"text\"\n                        value={userGuess}\n                        onChange={(e) => setUserGuess(e.target.value)}\n                        placeholder=\"Enter your guess\"\n                    />\n                    <button onClick={handleGuess}>Submit Guess</button>\n                    <p>{feedback}</p>\n                    <button onClick={handleGameEnd}>End Game</button>\n                </div>\n            ) : (\n                <p>{feedback || 'Error loading game question'}</p>\n            )}\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}